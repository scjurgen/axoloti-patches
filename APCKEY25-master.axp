<patch-1.0 appVersion="1.0.12">
   <obj type="math/smooth2" uuid="9ba3ddec912512e6b63211080e89cb25b6d84834" name="smooth2_1" x="504" y="0">
      <params>
         <frac32.u.map name="risetime" value="0.0"/>
         <frac32.u.map name="falltime" value="62.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="28" y="28">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="126" y="28">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="-3dB"/>
         <combo attributeName="boost" selection="20dB"/>
         <combo attributeName="mode" selection="Mono(L)"/>
      </attribs>
   </obj>
   <obj type="mix/mix 3 g" uuid="efc0bdb8ca0ec2184330951eff5203ff487e35a9" name="mix_1" x="224" y="42">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
         <frac32.u.map name="gain2" value="54.5"/>
         <frac32.u.map name="gain3" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/outconfig" uuid="eace67e3304afaa1bb695b444e9345f2d8adaf00" name="outconfig_1" x="728" y="42">
      <params/>
      <attribs>
         <combo attributeName="headphones" selection="-6dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <obj type="math/abs" uuid="4ae01ff03753539d9028888689654235fa199936" name="abs_1" x="364" y="70">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/abs" uuid="4ae01ff03753539d9028888689654235fa199936" name="abs_2" x="364" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/smooth2" uuid="9ba3ddec912512e6b63211080e89cb25b6d84834" name="smooth2_2" x="504" y="112">
      <params>
         <frac32.u.map name="risetime" value="0.0"/>
         <frac32.u.map name="falltime" value="62.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="251c57d1-6833-4666-a469-fb7c2b44e6c9" name="midihandler" x="686" y="140">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="251c57d1-6833-4666-a469-fb7c2b44e6c9">
         <author>JS</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="level1"/>
            <frac32 name="level2"/>
            <frac32 name="level3"/>
            <frac32 name="level4"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int count = 0;
int initialize = 0;
int lastValue[128];
int queueHead = 0;
int queueTail = 0;
int inQueue = 0;
uint8_t midiQueue[1024]; // we need quite a lot because setting all APC key25 values are 53 values
const int cursorKeyIndex = 40;
const int sceneKeyIndex = 48;
const int cursorKeysNote = 64;
const int sceneKeysNote = 82;
int32_t lastLevel[4];

void setButtonKey(uint8_t index, uint8_t value)
{
	AddMidiMessage(MIDI_NOTE_ON, index, value); 
}

void resetAll(uint8_t value)
{
	for (auto i=0; i < 40; ++i)
	{
		setButtonKey(i, value);
	}
	for (auto i=0; i < 8; ++i)
	{
		setButtonKey(cursorKeysNote+i, value);
	}
	for (auto i=0; i < 6; ++i)
	{
		setButtonKey(sceneKeysNote+i, value);
	}
}

void feedQueue(uint8_t value)
{
	inQueue++;
	midiQueue[queueHead++] = value;
	if (queueHead >= sizeof(midiQueue)/sizeof(midiQueue[0]))
		queueHead = 0;	
}

int countFood() 
{
	return inQueue;
}

uint8_t eatQueue()
{
	auto value = midiQueue[queueTail++];
	if (queueTail >= sizeof(midiQueue)/sizeof(midiQueue[0]))
		queueTail = 0;	
	inQueue--;
	return value;
}

void AddMidiMessage(uint8_t status, uint8_t data1, uint8_t data2)
{
	feedQueue(status);
	feedQueue(data1);
	feedQueue(data2);
}


const int8_t smallNumberFont[20] = {31, 31, 0,  31, 23, 29, 21, 31, 28, 15,
                                    29, 23, 31, 23, 16, 31, 21, 21, 29, 31};

const int8_t digitsAndLetter[41 * 3] = {
    31, 17, 31, 0,  31, 0,  23, 21, 29, 21, 21, 31, 28, 4,  15, 29, 21, 23,
    31, 21, 23, 16, 16, 31, 31, 21, 31, 28, 20, 31, 31, 20, 31, 31, 21, 27,
    31, 17, 17, 31, 17, 14, 31, 21, 21, 31, 20, 16, 31, 17, 23, 31, 4,  31,
    0,  31, 0,  3,  1,  31, 31, 4,  27, 31, 1,  1,  31, 8,  31, 15, 4,  30,
    31, 17, 31, 31, 20, 28, 30, 18, 31, 31, 20, 11, 29, 21, 23, 16, 31, 16,
    31, 1,  31, 30, 1,  30, 31, 2,  31, 27, 4,  27, 24, 7,  24, 19, 21, 25, // Z
    0,  29, 0,                                                              // !
    4,  31, 4,                                                              // +
    4,  4,  4,                                                              // -
    31, 5,  6,                                                              // b
    31, 10, 31,                                                             //#
};

uint8_t currentMatrix[5][8];
uint8_t newMatrix[5][8];

void renderNewMatrix() {
  for (int x = 0; x < 8; ++x) {
    for (int y = 0; y < 5; ++y) {
      if (newMatrix[y][x] != currentMatrix[y][x]) {
      	//LogTextMessage("pos %d, value %d", x + y * 8, newMatrix[y][x]);
      	AddMidiMessage(0x90, x + y * 8, newMatrix[y][x]); 
          currentMatrix[y][x] = newMatrix[y][x];
      }
    }
  }
}

void setMatrixColumn(int x, int value, int8_t color) {
  if (x >= 8)
    return;
  for (int y = 0; y < 5; ++y) {
    if ((value & 0x01) == 1) {
      newMatrix[y][x] = color;
    }
    else
      newMatrix[y][x] = 0;
    value >>= 1;
  }
}

void setText(int8_t x, char value, int8_t color=1) {
  int index = -1;
  if ((value >= '0') && (value <= '9'))
    index = (value - '0') * 3;
  if ((value >= 'A') && (value <= 'Z'))
    index = (value - 'A' + 10) * 3;
  if ((value >= 'a') && (value <= 'z'))
    index = (value - 'a' + 10) * 3;
  if (index >= 0) {
    setMatrixColumn(x++, digitsAndLetter[index++], color);
    setMatrixColumn(x++, digitsAndLetter[index++], color);
    setMatrixColumn(x++, digitsAndLetter[index++], color);
    setMatrixColumn(x, 0, color);
  }
}

void setSmallNumber(int8_t x, int value, int8_t color=1) {
  setMatrixColumn(x++, smallNumberFont[value * 2], color);
  setMatrixColumn(x++, smallNumberFont[value * 2 + 1], color);
  setMatrixColumn(x, 0, color);
}



void updateLevel(int channel, int32_t level)
{
	level >>= 21;
	LogTextMessage("%d", level);

	auto idx = channel*2+1;
	newMatrix[0][idx] = level>2?1:0;
	newMatrix[1][idx] = level>3?1:0;
	newMatrix[2][idx] = level>4?1:0;
	newMatrix[3][idx] = level>5?5:0;
	newMatrix[4][idx] = level>6?3:0;
}]]></code.declaration>
         <code.init><![CDATA[setText(0,'5',1);
setText(4,'J',1);]]></code.init>
         <code.krate><![CDATA[static int countUp=0;
static int beat = 3000;
beat--;
if (beat <=0)
{
	renderNewMatrix();
	beat = 100;

	if (inlet_level1 != lastLevel[0])
	{
		updateLevel(0, inlet_level1);
		lastLevel[0] = inlet_level1;
	}
	if (inlet_level2 != lastLevel[1])
	{
		updateLevel(1, inlet_level2);
		lastLevel[1] = inlet_level2;
	}
	if (inlet_level3 != lastLevel[2])
	{
		updateLevel(2, inlet_level3);
		lastLevel[2] = inlet_level3;
	}
	if (inlet_level4 != lastLevel[3])
	{
		updateLevel(3, inlet_level4);
		lastLevel[3] = inlet_level4;
	}
}

auto foodCnt = countFood();

if (foodCnt)
{
	auto len = MidiGetOutputBufferAvailable(MIDI_DEVICE_USB_HOST);
	//LogTextMessage("food: %d, midilen %d", countFood(), len);
	if (len >= 3)
	{
		auto status = eatQueue();
		uint8_t value2, value3;
		switch(status & 0xF0)
		{
			case 0x80:
			case 0x90:
			case 0xA0:
			case 0xB0:
			case 0xE0:
				value2 = eatQueue();
				value3 = eatQueue();
				//LogTextMessage("value: %02x %02x %02x", status, value2, value3);
				MidiSend3(MIDI_DEVICE_USB_HOST, 1, status, value2, value3); 
				break;
			case 0xC0:
			case 0xD0:
				value2 = eatQueue();
				//LogTextMessage("value: %02x %02x", status, value2);
				MidiSend2(MIDI_DEVICE_USB_HOST, 1, status, value2); 
				break;
			
		}
	}
}

/*
static int updateTrigger = 0;

static int countUp=0;
static int beat = 30000;
beat--;
if (beat <=0)
{
	countUp++;
	if (countUp==100)countUp = 0;
	setText(0,'0'+countUp/10,1);
	setText(4,'0'+countUp%10,1);
	renderNewMatrix();
	beat=800;
}

if (--updateTrigger <= 0)
{
	renderNewMatrix();
	updateTrigger = 3;
}


*/]]></code.krate>
         <code.midihandler><![CDATA[//LogTextMessage("value: %02x %02x %02x", status, data1, data2);


if (status == (MIDI_NOTE_ON | 1))
{
	LogTextMessage("note on %d", data1);
}
if (status == (MIDI_NOTE_OFF | 1))
{
	LogTextMessage("note off %d", data1);
}
if ((status == MIDI_NOTE_ON) || (status == MIDI_NOTE_OFF))
{
	char *onOff;
	if (status == MIDI_NOTE_ON)
		onOff = "on";
	else
		onOff = "off";
	if (data1 < 55)
	{
		LogTextMessage("matrix button %d %s", data1, onOff);
	}else if (data1 >= 64 && data1 <= 71)
	{
		LogTextMessage("channel button %d %s", data1-64, onOff);
	}else
	switch(data1)
	{
		case 81: LogTextMessage("stop all %s", onOff); break;
		case 82: LogTextMessage("scene clip stop %s", onOff); break;
		case 83: LogTextMessage("scene solo %s", onOff); break;
		case 84: LogTextMessage("scene rec arm %s", onOff); break;
		case 85: LogTextMessage("scene mute %s", onOff); break;
		case 86: LogTextMessage("scene select %s", onOff); break;
		case 91: LogTextMessage("play/pause %s", onOff); break;
		case 93: LogTextMessage("record %s", onOff); break;
		case 98: LogTextMessage("shift %s", onOff); break;
	}
}


if (status == MIDI_NOTE_ON)
{
	lastValue[data1]++;
	auto maxValue = data1>=64 ? 3 : 7;
	if (lastValue[data1] >= maxValue)
		lastValue[data1] = 0;
	MidiSend3(MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON, data1, lastValue[data1]); 
}
if (status == MIDI_CONTROL_CHANGE)
{
	if ((data1>=48 && data1<=55))
	{
		LogTextMessage("Pot %d: %d", data1-47, data2);
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="math/abs" uuid="4ae01ff03753539d9028888689654235fa199936" name="abs_3" x="364" y="154">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/abs" uuid="4ae01ff03753539d9028888689654235fa199936" name="abs_4" x="364" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/smooth2" uuid="9ba3ddec912512e6b63211080e89cb25b6d84834" name="smooth2_3" x="504" y="224">
      <params>
         <frac32.u.map name="risetime" value="0.0"/>
         <frac32.u.map name="falltime" value="60.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="c39fa438-4480-45cf-b6db-06dd3173bfd6" name="echo_1" x="154" y="294">
      <params/>
      <attribs>
         <spinner attributeName="maxDelayInSeconds" value="20"/>
      </attribs>
      <object id="patch/object" uuid="c39fa438-4480-45cf-b6db-06dd3173bfd6">
         <sDescription>Multitap delay output for sequence style effects</sDescription>
         <author>Juergen Schwietering</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
            <int32 name="delayTimeInSamples"/>
            <int32 name="tap1InSamples"/>
            <int32 name="tap2InSamples"/>
            <int32 name="tap3InSamples"/>
            <int32 name="tap4InSamples"/>
         </inlets>
         <outlets>
            <frac32buffer name="out0" description="direct output"/>
            <frac32buffer name="out1"/>
            <frac32buffer name="out2"/>
            <frac32buffer name="out3"/>
            <frac32buffer name="out4" description="final"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
         </displays>
         <params/>
         <attribs>
            <spinner name="maxDelayInSeconds" MinValue="1" MaxValue="60" DefaultValue="20"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t head;
int16_t *delayline;
int32_t tapsInSamples[4];]]></code.declaration>
         <code.init><![CDATA[static int16_t _delay[attr_maxDelayInSeconds*48000] __attribute__ ((section (".sdram")));
delayline = &_delay[0];

for (auto i=0; i < sizeof(_delay); ++i)
{
   delayline[i] = 0;
}
head = 0;]]></code.init>
         <code.krate><![CDATA[int32_t _totalTapDelay = inlet_delayTimeInSamples;

disp_d1 = _totalTapDelay;
tapsInSamples[0] = inlet_tap1InSamples;
tapsInSamples[1] = inlet_tap2InSamples;
tapsInSamples[2] = inlet_tap3InSamples;
tapsInSamples[3] = inlet_tap4InSamples;]]></code.krate>
         <code.srate><![CDATA[int32_t vals[4];

outlet_out4 = delayline[head] << 16;

delayline[head] = inlet_in >> 16;

for (auto i=0; i < 4; ++i)
{
       int32_t rdPos = head-tapsInSamples[i];
       if (rdPos < 0)
               rdPos += _totalTapDelay;
       vals[i] = delayline[rdPos]<<16;
}
head++;
if (head >= _totalTapDelay)  
       head = 0;

outlet_out0 = vals[0];
outlet_out1 = vals[1];
outlet_out2 = vals[2];
outlet_out3 = vals[3];]]></code.srate>
      </object>
   </patchobj>
   <obj type="tiar/env/rms meter" uuid="19a127f7-a7de-4c03-ad05-137f17497344" name="rms_1" x="350" y="294">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="8e65e2a2-a2ed-4ebc-8fc0-631a8cf64753" name="kticks2sec_1" x="42" y="308">
      <params>
         <int32 name="bpm" value="91"/>
         <int32 name="div" value="2"/>
         <int32 name="total" value="8"/>
         <int32 name="tap1" value="1"/>
         <int32 name="tap2" value="3"/>
         <int32 name="tap3" value="5"/>
         <int32 name="tap4" value="7"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="8e65e2a2-a2ed-4ebc-8fc0-631a8cf64753">
         <sDescription>BPM to samples</sDescription>
         <author>JS</author>
         <license>GPL</license>
         <inlets>
            <frac32 name="BPM"/>
         </inlets>
         <outlets>
            <int32 name="samplesTotal"/>
            <int32 name="tap1"/>
            <int32 name="tap2"/>
            <int32 name="tap3"/>
            <int32 name="tap4"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
            <int32.label name="d2"/>
         </displays>
         <params>
            <int32 name="bpm">
               <MinValue i="40"/>
               <MaxValue i="240"/>
            </int32>
            <int32 name="div">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="total">
               <MinValue i="3"/>
               <MaxValue i="16"/>
            </int32>
            <int32 name="tap1">
               <MinValue i="0"/>
               <MaxValue i="16"/>
            </int32>
            <int32 name="tap2">
               <MinValue i="0"/>
               <MaxValue i="16"/>
            </int32>
            <int32 name="tap3">
               <MinValue i="0"/>
               <MaxValue i="16"/>
            </int32>
            <int32 name="tap4">
               <MinValue i="0"/>
               <MaxValue i="16"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_samplesTotal =  60*param_total*48000/param_bpm/param_div;
outlet_tap1 =  60*param_tap1*48000/param_bpm/param_div;
outlet_tap2 =  60*param_tap2*48000/param_bpm/param_div;
outlet_tap3 =  60*param_tap3*48000/param_bpm/param_div;
outlet_tap4 =  60*param_tap4*48000/param_bpm/param_div;

disp_d1 = outlet_samplesTotal;
disp_d2 = outlet_tap1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth2" uuid="9ba3ddec912512e6b63211080e89cb25b6d84834" name="smooth2_4" x="504" y="336">
      <params>
         <frac32.u.map name="risetime" value="0.0"/>
         <frac32.u.map name="falltime" value="61.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="742" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="tiar/env/rms meter" uuid="19a127f7-a7de-4c03-ad05-137f17497344" name="rms_2" x="350" y="392">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="tiar/env/rms meter" uuid="19a127f7-a7de-4c03-ad05-137f17497344" name="rms_3" x="350" y="490">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_1" x="532" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="tiar/env/rms meter" uuid="19a127f7-a7de-4c03-ad05-137f17497344" name="rms_4" x="350" y="574">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="abs_1" outlet="out"/>
         <dest obj="smooth2_1" inlet="in"/>
      </net>
      <net>
         <source obj="abs_2" outlet="out"/>
         <dest obj="smooth2_2" inlet="in"/>
      </net>
      <net>
         <source obj="smooth2_1" outlet="out"/>
         <dest obj="midihandler" inlet="level1"/>
      </net>
      <net>
         <source obj="smooth2_2" outlet="out"/>
         <dest obj="midihandler" inlet="level2"/>
      </net>
      <net>
         <source obj="smooth2_3" outlet="out"/>
         <dest obj="midihandler" inlet="level3"/>
      </net>
      <net>
         <source obj="smooth2_4" outlet="out"/>
         <dest obj="midihandler" inlet="level4"/>
      </net>
      <net>
         <source obj="abs_3" outlet="out"/>
         <dest obj="smooth2_3" inlet="in"/>
      </net>
      <net>
         <source obj="abs_4" outlet="out"/>
         <dest obj="smooth2_4" inlet="in"/>
      </net>
      <net>
         <source obj="kticks2sec_1" outlet="samplesTotal"/>
         <dest obj="echo_1" inlet="delayTimeInSamples"/>
      </net>
      <net>
         <source obj="kticks2sec_1" outlet="tap1"/>
         <dest obj="echo_1" inlet="tap1InSamples"/>
      </net>
      <net>
         <source obj="kticks2sec_1" outlet="tap2"/>
         <dest obj="echo_1" inlet="tap2InSamples"/>
      </net>
      <net>
         <source obj="kticks2sec_1" outlet="tap3"/>
         <dest obj="echo_1" inlet="tap3InSamples"/>
      </net>
      <net>
         <source obj="kticks2sec_1" outlet="tap4"/>
         <dest obj="echo_1" inlet="tap4InSamples"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="echo_1" inlet="in"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="echo_1" outlet="out4"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="echo_1" outlet="out0"/>
         <dest obj="rms_1" inlet="in"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="rms_1" outlet="rms"/>
         <dest obj="abs_1" inlet="in"/>
         <dest obj="dial_1" inlet="in"/>
      </net>
      <net>
         <source obj="echo_1" outlet="out1"/>
         <dest obj="rms_2" inlet="in"/>
      </net>
      <net>
         <source obj="rms_2" outlet="rms"/>
         <dest obj="abs_2" inlet="in"/>
      </net>
      <net>
         <source obj="echo_1" outlet="out2"/>
         <dest obj="rms_3" inlet="in"/>
      </net>
      <net>
         <source obj="rms_3" outlet="rms"/>
         <dest obj="abs_3" inlet="in"/>
      </net>
      <net>
         <source obj="rms_4" outlet="rms"/>
         <dest obj="abs_4" inlet="in"/>
      </net>
      <net>
         <source obj="echo_1" outlet="out3"/>
         <dest obj="rms_4" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>473</x>
      <y>121</y>
      <width>873</width>
      <height>757</height>
   </windowPos>
</patch-1.0>