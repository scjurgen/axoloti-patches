<patch-1.0 appVersion="1.0.12">
   <obj type="audio/outconfig" uuid="eace67e3304afaa1bb695b444e9345f2d8adaf00" name="outconfig_1" x="364" y="14">
      <params/>
      <attribs>
         <combo attributeName="headphones" selection="-18dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="28" y="28">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="-3dB"/>
         <combo attributeName="boost" selection="20dB"/>
         <combo attributeName="mode" selection="Mono(L)"/>
      </attribs>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="140" y="84">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="c089863e-a202-47fd-8e91-690be549a54d" name="gain_1" x="224" y="84">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c089863e-a202-47fd-8e91-690be549a54d">
         <sDescription>on/off switch</sDescription>
         <author>Juergen Schwietering</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer name="in"/>
            <bool32 name="onoff"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.srate><![CDATA[if (inlet_onoff)
	outlet_out = inlet_in;
else
	outlet_out = 0;]]></code.srate>
      </object>
   </patchobj>
   <obj type="drj/fx/stereo_chorus" uuid="95b6f74f-253a-420f-a81c-bfaf28146d15" name="obj_1" x="322" y="84">
      <params>
         <frac32.u.map name="time" value="21.0"/>
         <frac32.s.map name="tspread" value="-11.0"/>
         <frac32.u.map name="lfoamt" value="14.0"/>
         <frac32.s.map name="lfofreq" value="-41.0"/>
         <frac32.s.map name="fspread" value="17.0"/>
         <frac32.u.map name="mix" value="32.0"/>
         <int32 name="voices" value="3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="448" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/in/digital" uuid="f59f139e8da912742832dc541157f20f30b7ac1b" name="digital_1" x="28" y="238">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PB0"/>
         <combo attributeName="mode" selection="pullup"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="8987539f-fb0a-4bc3-bf8a-bbd8478fe3ec" name="button_pot_1" x="70" y="364">
      <params>
         <int32 name="channel" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="8987539f-fb0a-4bc3-bf8a-bbd8478fe3ec">
         <sDescription>enable serial2( PA2/PA3 = SD2, baudrate: 115200) as extra midi i/o to use with euxoloti. Pot, Button values are transmitted by midi and finally routed to object outlets.</sDescription>
         <author>Paul</author>
         <license>BSD</license>
         <inlets/>
         <outlets>
            <int32 name="pot1"/>
            <int32 name="pot2"/>
            <int32 name="pot3"/>
            <int32 name="pot4"/>
            <int32 name="pot5"/>
            <int32 name="pot6"/>
            <int32 name="pot7"/>
            <int32 name="pot8"/>
            <int32 name="height"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="channel">
               <MinValue i="0"/>
               <MaxValue i="15"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[Thread* Thd;

int32_t pots[8];
int32_t midiHeight;
uint8_t midiBytes[3];
uint8_t midiCurData;
uint8_t midiNumData;

uint8_t StatusToMsgLength(uint8_t t)
{
    switch (t)
    {
        case 0x0:
        case 0x1:
        case 0x2:
        case 0x3:
        case 0x4:
        case 0x5:
        case 0x6:
        case 0x7: return 0;
        case 0x8:
        case 0x9:
        case 0xa:
        case 0xb: return 3;
        case 0xc:
        case 0xd: return 2;
        case 0xe: return 3;
        default: return -1;
    }
}

void MidiInByteHandler(uint8_t data)
{
    int8_t len;
    if (data & 0x80)
    {
        len = StatusToMsgLength(data >> 4);
        midiBytes[0] = data;
        midiNumData  = len - 1;
        midiCurData  = 0;
    }
    else
    {
        if (midiCurData == 0)
        {
            midiBytes[1] = data;
            midiCurData++;
        }
        else if (midiCurData == 1)
        {
            midiBytes[2] = data;
            if (midiNumData == 2)
            {
                if (midiBytes[0] == (0xB0 | param_channel))
                {
                    if ((midiBytes[1] >= 0) && (midiBytes[1] <= sizeof(pots) / sizeof(pots[0])))
                    {
                        LogTextMessage("%02x, %02x, %02x", midiBytes[0], midiBytes[1], midiBytes[2]);
                        pots[midiBytes[1]] = midiBytes[2];
                    }
                }

                else if (midiBytes[0] == (0x90 | param_channel))
                {
                    midiHeight = midiBytes[1];
                }
                midiCurData = 0;
            }
        }
    }
}

msg_t ThreadX2()
{
#if CH_USE_REGISTRY
    chRegSetThreadName("euxo button pot"); // define thread name
#endif

    midiNumData = 0;
    midiCurData = 0;

    sdPut(&SD2, 0xFF);

    while (!chThdShouldTerminate())
    {
        while (!sdGetWouldBlock(&SD2))
        {
            uint8_t ch = sdGet(&SD2);
            LogTextMessage("v=%02x", (int) ch);
            MidiInByteHandler(ch);
        }
        chThdSleepMilliseconds(1);
    }
    chThdExit((msg_t) 0);
}

static msg_t EuxoButPot(void* arg)
{
    ((attr_parent*) arg)->ThreadX2();
}
WORKING_AREA(waEuxoButPot, 256);]]></code.declaration>
         <code.init><![CDATA[palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7)|PAL_MODE_INPUT);// RX
palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));// TX

static const SerialConfig sd2Cfg = {115200, 0, 0, 0}; // set to midi baud rate but works also with higher baud rates.
sdStart(&SD2, &sd2Cfg);

Thd = chThdCreateStatic(waEuxoButPot, sizeof(waEuxoButPot),NORMALPRIO, EuxoButPot, (void *)this);]]></code.init>
         <code.dispose><![CDATA[chThdTerminate(Thd);
chThdWait(Thd);
sdStop(&SD2);]]></code.dispose>
         <code.krate><![CDATA[outlet_pot1 = this->pot[0];
outlet_pot2 = this->pot[1];
outlet_pot3 = this->pot[2];
outlet_pot4 = this->pot[3];
outlet_pot5 = this->pot[4];
outlet_pot6 = this->pot[5];
outlet_pot7 = this->pot[6];
outlet_pot8 = this->pot[7];

outlet_height = this->height;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d45cc606-e557-4612-a6bc-5309cf764234" name="cc_1" x="238" y="406">
      <params/>
      <attribs>
         <spinner attributeName="cc" value="10"/>
         <spinner attributeName="default" value="0"/>
      </attribs>
      <object id="patch/object" uuid="d45cc606-e557-4612-a6bc-5309cf764234">
         <sDescription>Receives Midi Continuous Controller messages, integer output (0-127)</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="midiCC" description="midi CC 0-127"/>
            <bool32.pulse name="trig" description="trigger output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="cc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="default" MinValue="0" MaxValue="127" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t ccv;
int32_t ntrig;
]]></code.declaration>
         <code.init><![CDATA[ccv = attr_default;
]]></code.init>
         <code.krate><![CDATA[outlet_midiCC= ccv;
outlet_trig = ntrig;
ntrig = 0;
]]></code.krate>
         <code.midihandler><![CDATA[LogTextMessage("%d: %02x, %02x, %02x",(int)port,(int)status,(int)data1,(int)data2);
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc)) 
{
	ccv = data2; ntrig = 1;
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="logic/toggle" uuid="f42f0d3aab552c17bc78b9e65f85dc24f977503d" name="toggle_1" x="336" y="420">
      <params/>
      <attribs/>
   </obj>
   <obj type="gpio/out/led2" uuid="3d7a4c75d1f9901181a17ba5de752782de911803" name="led2_1" x="420" y="420">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
      <net>
         <source obj="obj_1" outlet="out_l"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="obj_1" outlet="out_r"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="obj_1" inlet="in_l"/>
         <dest obj="obj_1" inlet="in_r"/>
      </net>
      <net>
         <source obj="cc_1" outlet="trig"/>
         <dest obj="toggle_1" inlet="trig"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="led2_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>238</x>
      <y>74</y>
      <width>835</width>
      <height>751</height>
   </windowPos>
</patch-1.0>